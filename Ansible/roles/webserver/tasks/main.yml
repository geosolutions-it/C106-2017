---
# prerequisites installation
- name: Ensure prerequisites are installed
  become: yes
  apt:
    name: "{{item}}"
    state: present
  with_items:
  - "{{openjdk_package_name}}"
  - unzip
  - git

- name: Install utilities for SMB share
  apt:
    name: cifs-utils
    state: present

# the following tasks are for deploying geoserver on ansible machine, extract data, push to gitlab
# to run these tasks; run playbook with --extra-vars "extract_data=0"
- name: Including tasks to push geoserver/data to GL
  include_tasks: "ansible_machine.yml"
  when: extract_data is defined

# git clone and pull
# ssh key is manually created, placed in ansible/credentials and encrypted with ansible-vault
# ssh keys on gitlab profile are added manually
# verify `known hosts` if it hangs up

- name: Ensure .ssh directory exists.
  file: 
    dest: "/home/ubuntu/.ssh"
    mode: 0700 
    owner: ubuntu 
    state: directory

- name: Download ssh key
  copy: 
    src: "{{source_key}}" 
    dest: "{{dest_key}}"
    mode: 0600
    owner: ubuntu

- name: Check the repo directory
  stat:
    path: "{{repo_download_path}}"
  register: repo

# clone repo if it's not present
- name: clone expample repo from gitlab
  git:
    repo: "{{repo_url}}"
    clone: yes
    recursive: yes
    accept_hostkey: yes
    key_file: /home/ubuntu/.ssh/id_rsa
    dest: "{{repo_download_path}}/"
  when: repo.stat.exists == False

# pull repo 
- name: Pull example repo from gitlab
  git:
    repo: "{{repo_url}}"
    accept_hostkey: yes
    key_file: /home/ubuntu/.ssh/id_rsa
    update: yes
    dest: "{{repo_download_path}}/"
  when: repo.stat.exists == True

# tomcat installation
- name: "add group {{tomcat_group}}"
  group:
    name: "{{tomcat_group}}"
    state: present

- name: "add user {{tomcat_user}}"
  user: 
    name: "{{tomcat_user}}"
    group: "{{tomcat_group}}"
    state: present

- name: install tomcat
  become: yes
  apt:
    name: tomcat8
    state: present

- name: Check for downloaded geoserver war
  stat:
    path: "/tmp/geoserver-2.16.x-latest-war.zip"
  register: downloaded

- name: download geoserver war
  become: yes
  get_url: 
    url: "{{geoserver_url}}"
    dest: /tmp
    remote_src: yes
  when: downloaded.stat.exists == False

- name: unarchive geoserver war
  become: yes
  unarchive: 
    src: "/tmp/geoserver-2.16.x-latest-war.zip"
    dest: "{{tomcat_install_dir}}/webapps"
    owner: "{{tomcat_user}}"
    group: "{{tomcat_group}}"
    remote_src: yes

- name: Ensure tomcat service is started
  systemd:
    name: tomcat8
    state: started
    enabled: True
    daemon_reload: yes
